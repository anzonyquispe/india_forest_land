
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> rm(list = ls())
> library(augsynth)
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(fixest)
> library(ggplot2)
> 
> 
> # Getting the workign directory 
> shell_root <- "/scratch/gpfs/ar8787/groupdata2/india_forest_land" 
> dbox_root <- "~/Dropbox/india_forest_land" 
> root <- shell_root
> setwd( root )
> 
> ### Geting State names
> state_names <- fread( "A_MicroData/state_names_shrug.csv" )
> state_id_code <- 30
> st_name <- state_names[ state_names$state_id == state_id_code ]$state_name
> 
> 
> # Getting the num of files
> # Import data
> df1 <- fread( "A_MicroData/data_sysdif_block_lvl.csv" )
> names(df1)
 [1] "state_id"                      "district_id"                  
 [3] "subdist_id"                    "year"                         
 [5] "post_ror_data_entry_block_any" "n_vil_notr"                   
 [7] "n_vil_tr"                      "total_vill"                   
 [9] "prop_vill_tr"                  "post_ror_data_entry_block_50" 
[11] "treecover"                     "area"                         
[13] "per_treecover"                 "block_id"                     
> df1 <- df1[df1$state_id == state_id_code ]
> df_year_2010 <- df1[df1$year == 2010]
> 
> 
> # Calculate the median of the 'value' column
> median_value <- median(df_year_2010$per_treecover)
> # Generate a new variable 'above_median'; it will be TRUE if 'value' is greater than the median
> df_year_2010[, above_median_block_any_all := (per_treecover > median_value)*1 ]
> df_year_2010 <- df_year_2010[, .(block_id, above_median_block_any_all )]
> 
> df2 <- df1 %>% left_join( df_year_2010 )
Joining with `by = join_by(block_id)`
> 
> # Generation of t2event
> # Create a data.table with minimum year by block_id
> min_years_data <- df2[
+   post_ror_data_entry_block_any == 1,
+   .(min_year = min(year)), # Replace 'year_column' with your actual year column name
+   by = .(block_id)
+ ]
> 
> # Merge the min_years_data back to the original dataset
> df2 <- merge(df2, min_years_data, by = "block_id", all.x = TRUE)
> df2$t2ev_ror_data_entry_block_any <- df2$year - df2$min_year
> 
> 
> df2_above <- df2[df2$above_median_block_any_all == 1]
> df2_below <- df2[df2$above_median_block_any_all == 0]
> 
> 
> 
> #-------------------------------------------------------------------------------
> # above the median
> #-------------------------------------------------------------------------------
> 
> 
> result <- tryCatch({
+   
+   # Estimatio Result
+   ppool_syn <- multisynth(per_treecover ~ post_ror_data_entry_block_any, 
+                           block_id, year, df2_above, time_cohort = TRUE, n_leads = 9 )
+   
+   filename <- paste0( "above_median_block_any_", state_id_code, ".RDS")
+   path <- file.path("E_Estimates/_vcf_10_augsyth/median_filter/by_state", filename)
+   saveRDS( ppool_syn, path )
+   
+   
+   # Get Summary result
+   ppool_syn_time_summ <- summary( ppool_syn )
+   filename <- paste0( "above_median_block_any_", state_id_code, "_sum.RDS")
+   path <- file.path("E_Estimates/_vcf_10_augsyth/median_filter/by_state", filename)
+   saveRDS( ppool_syn_time_summ,  path )
+   
+   
+   
+   
+   # Get the plot
+   est_df <- ppool_syn_time_summ$att
+   est_df <- est_df[est_df$Level == "Average", ]
+   est_df <- est_df[apply(!is.na(est_df), 1, all),]
+   
+   
+   n_df <- df2_above[t2ev_ror_data_entry_block_any %in% est_df$Time][, .N, by = t2ev_ror_data_entry_block_any]
+   n_df$Time <- n_df$t2ev_ror_data_entry_block_any
+   setorder(n_df,Time )
+   setorder(est_df,Time )
+   
+   
+   
+   # Getting factors
+   rect.length <- (max(est_df[,"Estimate"], na.rm = TRUE) - 
+                     min(est_df[,"Estimate"], na.rm = TRUE))/2
+   scale_fac <- 0.8 * rect.length / ( max(n_df[,"N"]) )
+   min_y_lim <- round(min(est_df$lower_bound), 2) * 1.05
+   max_y_lim <- round( max(est_df$upper_bound), 2) * 0.95
+   
+   est_df[,"xmin"] <- est_df[,"Time"] - 0.2
+   est_df[,"xmax"] <- est_df[,"Time"] + 0.2
+   est_df[,"ymin"] <- min_y_lim
+   est_df[,"ymax"] <- est_df[,"ymin"] + ( n_df[,"N"] * scale_fac )
+   
+   
+   # Getting the plot
+   p <- ggplot(est_df, aes(x = Time, y = Estimate)) + 
+     geom_line(color = "black") +
+     geom_point(color = "blue") +
+     geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), 
+                   width = 0.2, color = "red") +
+     geom_rect(data = est_df, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
+               fill = "grey70", colour = "grey69", alpha = 0.4, size = 0.2) + 
+     coord_cartesian(ylim = c( min_y_lim, max_y_lim ) ) +
+     scale_y_continuous(name = "Estimate", 
+                        sec.axis = sec_axis(~(.+ (-1*min_y_lim)) * (1/scale_fac), 
+                                            name = "Number of Observations")) + 
+     labs(y = "ATT", x = "Time to Event", title = "Ror Data Entry at Block Level if any Village is Treated") + 
+     geom_vline(aes(xintercept = 0), linetype = "dashed", color = "gray") +  # Dashed vertical line at x = 5
+     geom_hline(aes(yintercept = 0), linetype = "dashed", color = "gray") + 
+     ggtitle( st_name ) +
+     theme_minimal()
+   
+   
+   filename <- paste0( "above_median_block_any_", state_id_code, "_plot.png")
+   path <- file.path("F_Figures/_vcf_10_augsyth/median_filter/by_state", filename)
+   ggsave(filename = path, plot = p, width = 6, height = 4, dpi = 300)
+   
+   
+ }, error = function(err) {
+   
+   # Code to handle the error
+   # You can access information about the error in 'err'
+   cat("An error occurred:", conditionMessage(err), "
+ ")
+   
+   return( 'NA')
+ })
An error occurred: 'list' object cannot be coerced to type 'double' 
> print(result)
[1] "NA"
> 
> 
> 
> 
> 
> 
> #-------------------------------------------------------------------------------
> # Below the median
> #-------------------------------------------------------------------------------
> 
> result <- tryCatch({
+   
+   # Estimatio Result
+   ppool_syn <- multisynth(per_treecover ~ post_ror_data_entry_block_any, 
+                           block_id, year, df2_below, time_cohort = TRUE, n_leads = 9 )
+   
+   filename <- paste0( "below_median_block_any_", state_id_code, ".RDS")
+   path <- file.path("E_Estimates/_vcf_10_augsyth/median_filter/by_state", filename)
+   saveRDS( ppool_syn, path )
+   
+   
+   # Get Summary result
+   ppool_syn_time_summ <- summary( ppool_syn )
+   filename <- paste0( "below_median_block_any_", state_id_code, "_sum.RDS")
+   path <- file.path("E_Estimates/_vcf_10_augsyth/median_filter/by_state", filename)
+   saveRDS( ppool_syn_time_summ,  path )
+   
+   
+   
+   
+   # Get the plot
+   est_df <- ppool_syn_time_summ$att
+   est_df <- est_df[est_df$Level == "Average", ]
+   est_df <- est_df[apply(!is.na(est_df), 1, all),]
+   
+   
+   n_df <- df2_below[t2ev_ror_data_entry_block_any %in% est_df$Time][, .N, by = t2ev_ror_data_entry_block_any]
+   n_df$Time <- n_df$t2ev_ror_data_entry_block_any
+   setorder(n_df,Time )
+   setorder(est_df,Time )
+   
+   
+   
+   # Getting factors
+   rect.length <- (max(est_df[,"Estimate"], na.rm = TRUE) - 
+                     min(est_df[,"Estimate"], na.rm = TRUE))/2
+   scale_fac <- 0.8 * rect.length / ( max(n_df[,"N"]) )
+   min_y_lim <- round(min(est_df$lower_bound), 2) * 1.05
+   max_y_lim <- round( max(est_df$upper_bound), 2) * 0.95
+   
+   est_df[,"xmin"] <- est_df[,"Time"] - 0.2
+   est_df[,"xmax"] <- est_df[,"Time"] + 0.2
+   est_df[,"ymin"] <- min_y_lim
+   est_df[,"ymax"] <- est_df[,"ymin"] + ( n_df[,"N"] * scale_fac )
+   
+   
+   # Getting the plot
+   p <- ggplot(est_df, aes(x = Time, y = Estimate)) + 
+     geom_line(color = "black") +
+     geom_point(color = "blue") +
+     geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), 
+                   width = 0.2, color = "red") +
+     geom_rect(data = est_df, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
+               fill = "grey70", colour = "grey69", alpha = 0.4, size = 0.2) + 
+     coord_cartesian(ylim = c( min_y_lim, max_y_lim ) ) +
+     scale_y_continuous(name = "Estimate", 
+                        sec.axis = sec_axis(~(.+ (-1*min_y_lim)) * (1/scale_fac), 
+                                            name = "Number of Observations")) + 
+     labs(y = "ATT", x = "Time to Event", title = "Ror Data Entry at Block Level if any Village is Treated") + 
+     geom_vline(aes(xintercept = 0), linetype = "dashed", color = "gray") +  # Dashed vertical line at x = 5
+     geom_hline(aes(yintercept = 0), linetype = "dashed", color = "gray") + 
+     ggtitle( st_name ) +
+     theme_minimal()
+   
+   
+   filename <- paste0( "below_median_block_any_", state_id_code, "_plot.png")
+   path <- file.path("F_Figures/_vcf_10_augsyth/median_filter/by_state", filename)
+   ggsave(filename = path, plot = p, width = 6, height = 4, dpi = 300)
+   
+   
+ }, error = function(err) {
+   
+   # Code to handle the error
+   # You can access information about the error in 'err'
+   cat("An error occurred:", conditionMessage(err), "
+ ")
+   
+   return( 'NA')
+ })
An error occurred: 'list' object cannot be coerced to type 'double' 
> print(result)
[1] "NA"
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  2.427   0.215   7.044 
